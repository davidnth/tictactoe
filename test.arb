
arr = Array.new(3) {Array.new(3)}

def populate_board(arr)
  i = 0
  arr.map do |row|
    row.map { i += 1 }
  end
end

# Player class
class Player
  attr_accessor :name, :symbol

  @board = Array.new(3) { Array.new(3) }

  class << self
    attr_accessor :board
  end
  
  def initialize(name, symbol)
    @name = name
    @symbol = symbol
  end

  def self.new_game
    i = 0
    @board = @board.map do |row|
      row.map { i += 1 }
    end
  end

  def self.grid
    Player.board.each do |k|
      puts k.join('|')
    end
  end
  
  def input
    puts "#{@name}'s turn to make a move. Enter a number between 1-9."
    loop do
      number = gets.chomp.to_i
      break number if (1..9).include?(number) && valid_move?(number) #&& valid_move?(input)

      puts "Invalid move, try again."
    end
  end
  
  def valid_move?(arr, number)
    arr.any? { |row| row.include? input }
  end

end


def player_name
  puts 'Enter a name'
  loop do
    name = gets.chomp
    break name unless name.empty?

    puts 'Try again'
  end
end


player_one = Player.new(player_name, 'o')
player_two = Player.new(player_name, 'x')

puts "#{player_one.name} plays as \'#{player_one.symbol}\'."
puts "#{player_two.name} plays as \'#{player_two.symbol}\'."
clean_board = Player.new_game
move = player_one.input
p move
#Player.new_game
#Player.grid


